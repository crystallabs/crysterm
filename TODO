# Source Code

In the code, questions and/or things to verify at some later point are identified with "XXX".

Things to change/improve are identified with "TODO".

# List of TODOs

All XXX and TODO items in the sources.

Currently events are emitted whereever needed with just e.g.: `emit SomeEvent, ...`.
See if this is OK, or if events to emit should be passed via a channel and always be emitted from a single/same Fiber.

Examine effect of `use_buffer` variable in Tput, and see whether it can be completely removed, or it can be used
meaningfully in some way?

There is a concept of Unicode and "full Unicode". Full being the one with all Unicode stuff that Crystal currently 
does not support outside of its UTF-8 support. See what to do this over time - is there a chance Crystal would
support more, or the idea of "full Unicode" needs to be just dropped from the sources.

On an element, top/left/width/height can also be a string. Also allow Symbols to be used.

Currently, every widget must have a `Screen`. This should not be so. See what try()s have to be added to allow
`screen` of a widget to remain uninitialized. (Such widgets would simply never be rendered since they're not
on any screen, but it should otherwise be possible to create a hierarchy of widgets in memory.)
Skip this only if doing it would be too inconvenient (e.g. if even basic functions require values that are only
known after a Screen is associated.)

When specifying top/left, it is possible to say "center". This will center the widget, and is different than
saying "50%". For example, for a screen of 100 and width 50, "center" will make it begin at 25, while "50%" will
make it begin at 50. Now, when using percentages, it is possible to say e.g. "50%+10" (This would result in
widget starting at 60 in our example). But it appears it is not possible to use the +- specifier if "center"
is used. Support specifying +- in all cases.

TextArea widget has an attribute input_on_focus=Bool. By default it is false, and in turn requires Enter to be
pressed for the widget to start accepting input. But setting it to true, so that input would be accepted as soon
as / whenever the widget is in focus, does not work correctly and needs fixing.
