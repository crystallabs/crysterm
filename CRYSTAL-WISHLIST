Wishlist for Crystal features:


1) Loops with labels, using whatever syntax would be appropriate, e.g.:

```
outer: while true
  while true
    break :outer
  end
end
```

2) Indirect initialization. This to work without throwing error:

```
class X
  @x : Bool

  def initialize
    set_vars
  end

  def set_vars
    @x ||= true
  end
end
```

3) Introducing 'undefined' or similar to mean unspecified values. E.g.:

```
class X
  @var = "test"

  def initialize (@var = undefined)
    puts @var # ==> "test"
  end

end
```

4) Type-safe `#==` operator

Due to default implementation of `#==` in `Value` and `Reference`, comparing
anything to anything is allowed and returns false. This is very dangerous
and leads to incorrect/invalid comparisons which always fail.

https://github.com/crystal-lang/crystal/issues/10277

https://github.com/crystal-ameba/ameba/issues/237

5) Exposed API allowing to kill Fiber from outside

6) Ability to create proc and partial from a method with named args:

```
def f(a : Int32, b : Int32)
end

# Can't use named args:
pf = ->f(a : Int32, b : Int32)

# Nor here:
ppf = pf.partial(b: 10)

```
