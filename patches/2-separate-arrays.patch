
WIP, but usable if this is the way to go.

This patch splits @lines into @lines_attr and @lines_char.

diff --git a/src/screen.cr b/src/screen.cr
index 5252616..24fdb6b 100644
--- a/src/screen.cr
+++ b/src/screen.cr
@@ -325,17 +325,18 @@ module Crysterm
       # is causing dirty=true (and/or the logic how it is applied below) to not work correctly, so that
       # a re-creation was necessary on resize. Remains to be checked whether any further errors related
       # to this code and/or dirty= will come up or not.
-      old_height = @lines.size
+      old_height = @lines_attr.size
       new_height = aheight
 
-      old_width = @lines[0]?.try(&.size) || 0
+      old_width = @lines_attr[0]?.try(&.size) || 0
       new_width = awidth
 
       if !dirty
         do_clear = false
       else
         do_clear = true
-        @lines = Array(Row).new
+        @lines_attr = Array(Row(Int32)).new
+        @lines_char = Array(Row(Char)).new
         old_height = 0
         old_width = 0
       end
@@ -345,9 +346,12 @@ module Crysterm
         do_clear = true
 
         Math.min(old_height, new_height).times do |i|
-          adjust_width @lines[i], old_width, new_width, dirty
-          @lines[-1].dirty = dirty
-          @olines[-1].dirty = dirty
+          adjust_width_attr @lines_attr[i], old_width, new_width, dirty
+          adjust_width_char @lines_char[i], old_width, new_width, dirty
+          @lines_attr[-1].dirty = dirty
+          @lines_char[-1].dirty = dirty
+          @olines_attr[-1].dirty = dirty
+          @olines_char[-1].dirty = dirty
         end
       end
 
@@ -357,7 +361,8 @@ module Crysterm
         do_clear = true
         if diff > 0
           diff.times do
-            add_row dirty
+            add_row_attr dirty
+            add_row_char dirty
           end
         elsif diff < 0
           (diff * -1).times do
@@ -370,29 +375,60 @@ module Crysterm
     end
 
     @[AlwaysInline]
-    private def add_row(dirty)
-      col = Row.new
-      adjust_width col, 0, awidth, dirty
-      @lines.push col
-      @lines[-1].dirty = dirty
-
-      col = Row.new
-      adjust_width col, 0, awidth, dirty
-      @olines.push col
-      @olines[-1].dirty = dirty
+    private def add_row_attr(dirty)
+      col = Row(Int32).new
+      adjust_width_attr col, 0, awidth, dirty
+      @lines_attr.push col
+      @lines_attr[-1].dirty = dirty
+
+      col = Row(Int32).new
+      adjust_width_attr col, 0, awidth, dirty
+      @olines_attr.push col
+      @olines_attr[-1].dirty = dirty
+    end
+
+    @[AlwaysInline]
+    private def add_row_char(dirty)
+      col = Row(Char).new
+      adjust_width_char col, 0, awidth, dirty
+      @lines_char.push col
+      @lines_char[-1].dirty = dirty
+
+      col = Row(Char).new
+      adjust_width_char col, 0, awidth, dirty
+      @olines_char.push col
+      @olines_char[-1].dirty = dirty
     end
 
     @[AlwaysInline]
     private def remove_row
-      @lines.pop
+      @lines_attr.pop
+      @lines_char.pop
+
+      # XXX Needed for good housekeeping?
+      #@olines_attr.pop
+      #@olines_char.pop
     end
 
     @[AlwaysInline]
-    private def adjust_width(line, old_width, new_width, dirty)
+    private def adjust_width_attr(line, old_width, new_width, dirty)
+      diff = new_width - old_width
+      if diff > 0
+        diff.times do
+          line.push @default_attr
+        end
+      elsif diff < 0
+        (diff * -1).times do
+          line.pop
+        end
+      end
+    end
+
+    private def adjust_width_char(line, old_width, new_width, dirty)
       diff = new_width - old_width
       if diff > 0
         diff.times do
-          line.push Cell.new
+          line.push ' '
         end
       elsif diff < 0
         (diff * -1).times do
diff --git a/src/screen_angles.cr b/src/screen_angles.cr
index 9877960..eea65e7 100644
--- a/src/screen_angles.cr
+++ b/src/screen_angles.cr
@@ -44,16 +44,16 @@ module Crysterm
     # you're asking for.
     def _get_angle(lines, x, y)
       angle = 0
-      attr = lines[y][x].attr
-      ch = lines[y][x].char
+      attr = lines_attr[y][x]
+      ch = lines_char[y][x]
 
-      if lines[y][x - 1]? && L_ANGLES.includes? lines[y][x - 1].char
-        if (lines[y][x - 1].attr != attr)
+      if lines_char[y][x - 1]? && L_ANGLES.includes? lines_char[y][x - 1]
+        if lines_attr[y][x - 1] != attr
           case @dock_contrast
           when DockContrast::DontDock
             return ch
           when DockContrast::Blend
-            lines[y][x].attr = Colors.blend lines[y][x - 1].attr, attr
+            lines_attr[y][x] = Colors.blend lines_attr[y][x - 1], attr
             # when DockContrast::Ignore
             #  Note: ::Ignore needs no custom handler/code; it works as-is.
           end
@@ -61,13 +61,13 @@ module Crysterm
         angle |= BITWISE_L_ANGLE
       end
 
-      if lines[y - 1]? && U_ANGLES.includes? lines[y - 1][x].char
-        if (lines[y - 1][x].attr != attr)
+      if lines_char[y - 1]? && U_ANGLES.includes? lines_char[y - 1][x]
+        if lines_attr[y - 1][x] != attr
           case @dock_contrast
           when DockContrast::DontDock
             return ch
           when DockContrast::Blend
-            lines[y][x].attr = Colors.blend lines[y - 1][x].attr, attr
+            lines_attr[y][x] = Colors.blend lines_attr[y - 1][x], attr
             # when DockContrast::Ignore
             #  Note: ::Ignore needs no custom handler/code; it works as-is.
           end
@@ -75,13 +75,13 @@ module Crysterm
         angle |= BITWISE_U_ANGLE
       end
 
-      if lines[y][x + 1]? && R_ANGLES.includes? lines[y][x + 1].char
-        if (lines[y][x + 1].attr != attr)
+      if lines_char[y][x + 1]? && R_ANGLES.includes? lines_char[y][x + 1]
+        if lines_attr[y][x + 1] != attr
           case @dock_contrast
           when DockContrast::DontDock
             return ch
           when DockContrast::Blend
-            lines[y][x].attr = Colors.blend lines[y][x + 1].attr, attr
+            lines_attr[y][x] = Colors.blend lines_attr[y][x + 1], attr
             # when DockContrast::Ignore
             #  Note: ::Ignore needs no custom handler/code; it works as-is.
           end
@@ -89,13 +89,13 @@ module Crysterm
         angle |= BITWISE_R_ANGLE
       end
 
-      if lines[y + 1]? && D_ANGLES.includes? lines[y + 1][x].char
-        if (lines[y + 1][x].attr != attr)
+      if lines_char[y + 1]? && D_ANGLES.includes? lines_char[y + 1][x]
+        if lines_attr[y + 1][x] != attr
           case @dock_contrast
           when DockContrast::DontDock
             return ch
           when DockContrast::Blend
-            lines[y][x].attr = Colors.blend lines[y + 1][x].attr, attr
+            lines_attr[y][x] = Colors.blend lines_attr[y + 1][x], attr
             # when DockContrast::Ignore
             #  Note: ::Ignore needs no custom handler/code; it works as-is.
           end
@@ -111,15 +111,15 @@ module Crysterm
       # +-------+  |
       # |          |
       # +----------+
-      # if U_ANGLES.includes? lines[y][x].char
-      #  if lines[y + 1] && D_ANGLES.includes? lines[y + 1][x].char
+      # if U_ANGLES.includes? lines_char[y][x]
+      #  if lines_char[y + 1] && D_ANGLES.includes? lines_char[y + 1][x]
       #    case @dock_contrast
       #    when DockContrast::DontDock
-      #      if lines[y + 1][x].attr != attr
+      #      if lines_attr[y + 1][x] != attr
       #        return ch
       #      end
       #    when DockContrast::Blend
-      #      lines[y][x].attr = Colors.blend lines[y + 1][x].attr, attr
+      #      lines_attr[y][x] = Colors.blend lines_attr[y + 1][x], attr
       #    end
       #    angle |= BITWISE_D_ANGLE
       #  end
diff --git a/src/screen_drawing.cr b/src/screen_drawing.cr
index c382823..b548ee5 100644
--- a/src/screen_drawing.cr
+++ b/src/screen_drawing.cr
@@ -39,7 +39,7 @@ module Crysterm
     @post = IO::Memory.new 1024
 
     # Draws the screen based on the contents of in-memory grid of cells (`@lines`).
-    def draw(start = 0, stop = @lines.size - 1)
+    def draw(start = 0, stop = @lines_attr.size - 1)
       # D O:
       # emit Event::PreDraw
 
@@ -62,20 +62,23 @@ module Crysterm
       # For all rows (y = row coordinate)
       (start..stop).each do |y|
         # Current line we're looking at, which we'll possibly modify (array of cells)
-        line = @lines[y]
+        line_attr = @lines_attr[y]
+        line_char = @lines_char[y]
 
         # Original line, as it was in the previous render
-        o = @olines[y]
+        oline_attr = @olines_attr[y]
+        oline_char = @olines_char[y]
 
         # Log.trace { line } if line.any? &.char.!=(' ')
 
         # Skip if no change in line
-        if (!line.dirty && !(c.artificial? && (y == tput.cursor.y)))
+        if (!line_attr.dirty && !line_char.dirty && !(c.artificial? && (y == tput.cursor.y)))
           next
         end
 
         # We're processing this line, so mark it as not dirty now.
-        line.dirty = false
+        line_attr.dirty = false
+        line_char.dirty = false
 
         # Assume line is dirty by continuing:
         # XXX maybe need to optimize to draw only dirty parts, not the whole line?
@@ -86,10 +89,10 @@ module Crysterm
         attr = @default_attr
 
         # For all cells in row (x = column coordinate)
-        line.size.times do |x|
+        line_attr.size.times do |x|
           # Desired attr code and char
-          desired_attr = line[x].attr
-          desired_char = line[x].char
+          desired_attr = line_attr[x]
+          desired_char = line_char[x]
 
           # Render the artificial cursor.
           if (c.artificial? && !c._hidden && (c._state != 0) && (x == tput.cursor.x) && (y == tput.cursor.y))
@@ -107,12 +110,12 @@ module Crysterm
             clr = true
             neq = false # Current line 'not equal' to line as it was on previous render (i.e. it changed content)
 
-            (x...line.size).each do |xx|
-              if line[xx] != {desired_attr, ' '}
+            (x...line_attr.size).each do |xx|
+              if (line_attr[xx] != desired_attr) || (line_char[xx] != ' ')
                 clr = false
                 break
               end
-              if line[xx] != o[xx]
+              if (line_attr[xx] != oline_attr[xx]) || (line_char[xx] != oline_char[xx])
                 neq = true
               end
             end
@@ -136,9 +139,9 @@ module Crysterm
               end
               #### #### ####
 
-              (x...line.size).each do |xx|
-                o[xx].attr = desired_attr
-                o[xx].char = ' '
+              (x...line_attr.size).each do |xx|
+                oline_attr[xx] = desired_attr
+                oline_char[xx] = ' '
               end
 
               break
@@ -189,8 +192,8 @@ module Crysterm
 
           # Optimize by comparing the real output
           # buffer to the pending output buffer.
-          o[x]?.try do |ox|
-            if ox == {desired_attr, desired_char}
+          oline_attr[x]?.try do
+            if (oline_attr[x] == desired_attr) && (oline_char[x] == desired_char)
               if lx == -1
                 lx = x
                 ly = y
@@ -205,8 +208,8 @@ module Crysterm
               lx = -1
               ly = -1
             end
-            ox.attr = desired_attr
-            ox.char = desired_char
+            oline_attr[x] = desired_attr
+            oline_char[x] = desired_char
           end
 
           if desired_attr != attr
@@ -447,8 +450,14 @@ module Crysterm
       # emit Event::Draw
     end
 
-    def blank_line(ch = ' ', dirty = false)
-      o = Row.new awidth, {@default_attr, ch}
+    def blank_line_attr(attr = @default_attr, dirty = false)
+      o = Row(Int32).new awidth, attr
+      o.dirty = dirty
+      o
+    end
+
+    def blank_line_char(ch = ' ', dirty = false)
+      o = Row(Char).new awidth, ch
       o.dirty = dirty
       o
     end
@@ -480,10 +489,15 @@ module Crysterm
       j = bottom + 1
 
       n.times do
-        @lines.insert y, blank_line
-        @lines.delete_at j
-        @olines.insert y, blank_line
-        @olines.delete_at j
+        @lines_attr.insert y, blank_line_attr
+        @lines_attr.delete_at j
+        @olines_attr.insert y, blank_line_attr
+        @olines_attr.delete_at j
+
+        @lines_char.insert y, blank_line_char
+        @lines_char.delete_at j
+        @olines_char.insert y, blank_line_char
+        @olines_char.delete_at j
       end
     end
 
@@ -512,10 +526,15 @@ module Crysterm
       j = bottom + 1
 
       n.times do
-        @lines.insert y, blank_line
-        @lines.delete_at j
-        @olines.insert y, blank_line
-        @olines.delete_at j
+        @lines_attr.insert y, blank_line_attr
+        @lines_attr.delete_at j
+        @olines_attr.insert y, blank_line_attr
+        @olines_attr.delete_at j
+
+        @lines_char.insert y, blank_line_char
+        @lines_char.delete_at j
+        @olines_char.insert y, blank_line_char
+        @olines_char.delete_at j
       end
     end
 
@@ -547,10 +566,15 @@ module Crysterm
       # j = bottom + 1 # Unused
       while n > 0
         n -= 1
-        @lines.insert y, blank_line
-        @lines.delete_at y
-        @olines.insert y, blank_line
-        @olines.delete_at y
+        @lines_attr.insert y, blank_line_attr
+        @lines_attr.delete_at y
+        @olines_attr.insert y, blank_line_attr
+        @olines_attr.delete_at y
+
+        @lines_char.insert y, blank_line_char
+        @lines_char.delete_at y
+        @olines_char.insert y, blank_line_char
+        @olines_char.delete_at y
       end
     end
 
@@ -580,10 +604,15 @@ module Crysterm
       j = bottom + 1
 
       n.times do
-        @lines.insert j, blank_line
-        @lines.delete_at y
-        @olines.insert j, blank_line
-        @olines.delete_at y
+        @lines_attr.insert j, blank_line_attr
+        @lines_attr.delete_at y
+        @olines_attr.insert j, blank_line_attr
+        @olines_attr.delete_at y
+
+        @lines_char.insert j, blank_line_char
+        @lines_char.delete_at y
+        @olines_char.insert j, blank_line_char
+        @olines_char.delete_at y
       end
     end
 
@@ -655,20 +684,24 @@ module Crysterm
       return pos._clean_sides = true if (pos.xi - 1) < 0 || pos.xl > awidth
 
       (pos.xi - 1).downto(0) do |x|
-        first = @olines[yi][x] if @olines[yi]?
+        first_attr = @olines_attr[yi][x] if @olines_attr[yi]?
+        first_char = @olines_char[yi][x] if @olines_char[yi]?
         yi.upto(yl - 1) do |y|
-          break unless @olines[y]? && @olines[y][x]?
-          ch = @olines[y][x]
-          return pos._clean_sides = false if ch != first
+          break unless @olines_attr[y]? && @olines_attr[y][x]?
+          ch_attr = @olines_attr[y][x]
+          ch_char = @olines_char[y][x]
+          return pos._clean_sides = false if (ch_attr != first_attr) || (ch_char != first_char)
         end
       end
 
       (pos.xl...awidth).each do |x2|
-        first = @olines[yi][x2] if @olines[yi]?
+        first_attr = @olines_attr[yi][x2] if @olines_attr[yi]?
+        first_char = @olines_char[yi][x2] if @olines_char[yi]?
         yi.upto(yl - 1) do |y|
-          break unless @olines[y]? && @olines[y][x2]?
-          ch = @olines[y][x2]
-          return pos._clean_sides = false if ch != first
+          break unless @olines_attr[y]? && @olines_attr[y][x2]?
+          ch_attr = @olines_attr[y][x2]
+          ch_char = @olines_char[y][x2]
+          return pos._clean_sides = false if (ch_attr != first_attr) || (ch_char != first_char)
         end
       end
 
@@ -682,22 +715,27 @@ module Crysterm
 
     # Fills any chosen region on the screen with chosen character and attributes.
     def fill_region(attr, ch, xi, xl, yi, yl, override = false)
-      lines = @lines
+      lines_attr = @lines_attr
+      lines_char = @lines_char
 
       xi = 0 if xi < 0
       yi = 0 if yi < 0
 
       yi.upto(yl - 1) do |y|
-        break unless lines[y]?
+        break unless lines_attr[y]?
 
         xi.upto(xl - 1) do |x|
-          cell = lines[y][x]?
-          break unless cell
+          cell_attr = lines_attr[y][x]?
+          cell_char = lines_char[y][x]?
+          break unless cell_attr
 
-          if override || cell != {attr, ch}
-            lines[y][x].attr = attr
-            lines[y][x].char = ch
-            lines[y].dirty = true
+          if override || cell_attr != attr
+            lines_attr[y][x] = attr
+            lines_attr[y].dirty = true
+          end
+          if override || cell_char != ch
+            lines_char[y][x] = ch
+            lines_char[y].dirty = true
           end
         end
       end
diff --git a/src/screen_rendering.cr b/src/screen_rendering.cr
index c2e8a10..a128d58 100644
--- a/src/screen_rendering.cr
+++ b/src/screen_rendering.cr
@@ -93,11 +93,13 @@ module Crysterm
     # multi-colored borders.
     @dock_contrast = DockContrast::Blend
 
-    property lines = Array(Row).new
-    property olines = Array(Row).new
+    property lines_attr = Array(Row(Int32)).new
+    property lines_char = Array(Row(Char)).new
+    property olines_attr = Array(Row(Int32)).new
+    property olines_char = Array(Row(Char)).new
 
     def _dock_borders
-      lines = @lines
+      lines_char = @lines_char
       stops = @_border_stops
 
       # D O:
@@ -108,20 +110,20 @@ module Crysterm
       #
       # for (i = 0; i < keys.length; i++)
       #   y = keys[i]
-      #   if (!lines[y]) continue
+      #   if (!lines_char[y]) continue
       #   stop = this._borderStops[y]
       #   for (x = stop.xi; x < stop.xl; x++)
 
       stops = stops.keys.map(&.to_i).sort!
 
       stops.each do |y|
-        next unless lines[y]?
+        next unless lines_char[y]?
 
         awidth.times do |x|
-          ch = lines[y][x].char
+          ch = lines_char[y][x]
           if ANGLES.includes? ch
-            lines[y][x].char = _get_angle lines, x, y
-            lines[y].dirty = true
+            lines_char[y][x] = _get_angle lines_char, x, y
+            lines_char[y].dirty = true
           end
         end
       end
diff --git a/src/screen_rows.cr b/src/screen_rows.cr
index 1946eab..31f2fd6 100644
--- a/src/screen_rows.cr
+++ b/src/screen_rows.cr
@@ -1,50 +1,16 @@
 module Crysterm
   class Screen
-    # Screen rows and cells
-
-    # Individual screen cell
-    class Cell
-      include Comparable(self)
-
-      property attr : Int32 = Screen::DEFAULT_ATTR
-
-      property char : Char = Screen::DEFAULT_CHAR
-
-      def initialize(@attr, @char)
-      end
-
-      def initialize(@char)
-      end
-
-      def initialize
-      end
-
-      def <=>(other : Cell)
-        if (d = @attr <=> other.attr) == 0
-          @char <=> other.char
-        else
-          d
-        end
-      end
-
-      def <=>(other : Tuple(Int32, Char))
-        if (d = @attr <=> other[0]) == 0
-          @char <=> other[1]
-        else
-          d
-        end
-      end
-    end
+    # Screen rows
 
     # Individual screen row
-    class Row < Array(Cell)
+    class Row(T) < Array(T)
       property dirty = false
 
       def initialize
         super
       end
 
-      def initialize(width, cell : Cell | Tuple(Int32, Char) = {@attr, @char})
+      def initialize(width, cell : T)
         super width
       end
     end
diff --git a/src/screen_screenshot.cr b/src/screen_screenshot.cr
index 47568d7..bf8d506 100644
--- a/src/screen_screenshot.cr
+++ b/src/screen_screenshot.cr
@@ -19,7 +19,8 @@ module Crysterm
         # line = term
         #  ? term.lines[y]
         #  : this.lines[y]
-        line = @lines[y]?
+        line_attr = @lines_attr[y]?
+        line_char = @lines_char[y]?
 
         break if !line
 
@@ -29,8 +30,8 @@ module Crysterm
         xi.upto(xl - 1) do |x|
           break if !line[x]?
 
-          data = line[x].attr
-          ch = line[x].char
+          data = line_attr[x]
+          ch = line_char[x]
 
           if data != attr
             outbuf << "\e[m" if attr != @default_attr
diff --git a/src/widget/bigtext.cr b/src/widget/bigtext.cr
index 88beb25..e1f32e4 100644
--- a/src/widget/bigtext.cr
+++ b/src/widget/bigtext.cr
@@ -116,7 +116,8 @@ module Crysterm
         coords = _render
         return unless coords
 
-        lines = screen.lines
+        lines_attr = screen.lines_attr
+        lines_char = screen.lines_char
         left = coords.xi + ileft
         top = coords.yi + itop
         right = coords.xl - iright
@@ -154,19 +155,20 @@ module Crysterm
               mcell = mline[mx]?
               break if mcell.nil?
 
-              lines[y]?.try(&.[x + mx]?).try do |cell|
+              lines_attr[y]?.try(&.[x + mx]?).try do
                 if (style.fchar != ' ')
-                  cell.attr = default_attr
-                  cell.char = mcell == 1 ? style.fchar : style.char
+                  lines_attr[y][x + mx] = default_attr
+                  lines_char[y][x + mx] = mcell == 1 ? style.fchar : style.char
                 else
-                  cell.attr = mcell == 1 ? attr : default_attr
-                  cell.char = mcell == 1 ? ' ' : style.char
+                  lines_attr[y][x + mx] = mcell == 1 ? attr : default_attr
+                  lines_char[y][x + mx] = mcell == 1 ? ' ' : style.char
                 end
               end
 
               mx += 1
             end
-            lines[y]?.try &.dirty = true
+            lines_attr[y]?.try &.dirty = true
+            lines_char[y]?.try &.dirty = true
 
             y += 1
           end
diff --git a/src/widget/progressbar.cr b/src/widget/progressbar.cr
index 69c5f98..717cc62 100644
--- a/src/widget/progressbar.cr
+++ b/src/widget/progressbar.cr
@@ -84,13 +84,13 @@ module Crysterm
         # Why here the formatted content is only in @_pcontent, while in blessed
         # it appears to be in `this.content` directly?
         if (pc = @_pcontent) && !pc.empty?
-          screen.lines[yi]?.try do |line|
+          screen.lines_char[yi]?.try do |line_char|
             pc.each_char_with_index do |c, i|
-              line[xi + i]?.try do |cell|
-                cell.char = c
+              line_char[xi + i]?.try do
+                line_char[xi + i] = c
               end
             end
-            line.dirty = true
+            line_char.dirty = true
           end
         end
 
diff --git a/src/widget_content.cr b/src/widget_content.cr
index 3353b12..c6fe3fd 100644
--- a/src/widget_content.cr
+++ b/src/widget_content.cr
@@ -260,14 +260,14 @@ module Crysterm
       outbuf
     end
 
-    def _parse_attr(lines : CLines)
+    def _parse_attr(lines_attr : CLines)
       default_attr = sattr(style)
       attr = default_attr
       attrs = [] of Int32
 
-      return if lines[0].attr == attr
+      return if lines_attr[0] == attr
 
-      lines.each_with_index do |line, j|
+      lines_attr.each_with_index do |line, j|
         attrs.push attr
         raise "indexing error" unless attrs.size == j + 1
 
diff --git a/src/widget_rendering.cr b/src/widget_rendering.cr
index 725af27..bd826c2 100644
--- a/src/widget_rendering.cr
+++ b/src/widget_rendering.cr
@@ -58,7 +58,8 @@ module Crysterm
         return
       end
 
-      lines = screen.lines
+      lines_attr = screen.lines_attr
+      lines_char = screen.lines_char
       xi = coords.xi
       xl = coords.xl
       yi = coords.yi
@@ -155,17 +156,17 @@ module Crysterm
       if style.padding.any? || !@align.top?
         if alpha = style.alpha?
           (Math.max(yi, 0)...yl).each do |y|
-            if !lines[y]?
+            if !lines_attr[y]?
               break
             end
             (Math.max(xi, 0)...xl).each do |x|
-              if !lines[y][x]?
+              if !lines_attr[y][x]?
                 break
               end
-              lines[y][x].attr = Colors.blend(attr, lines[y][x].attr, alpha: alpha)
+              lines_attr[y][x] = Colors.blend(attr, lines_attr[y][x], alpha: alpha)
               # D O:
-              # lines[y][x].char = bch
-              lines[y].dirty = true
+              # lines_char[y][x] = bch
+              lines_attr[y].dirty = true
             end
           end
         else
@@ -196,7 +197,7 @@ module Crysterm
       # Draw the content and background.
       # yi.step to: yl-1 do |y|
       (yi...yl).each do |y|
-        if (!lines[y]?)
+        if (!lines_attr[y]?)
           if (y >= screen.aheight || yl < ibottom)
             break
           else
@@ -207,8 +208,7 @@ module Crysterm
         x = xi - 1
         while x < xl - 1
           x += 1
-          cell = lines[y][x]?
-          unless cell
+          unless lines_attr[y][x]?
             if x >= screen.awidth || xl < iright
               break
             else
@@ -262,21 +262,24 @@ module Crysterm
             # outer loop, and continue to it instead.
             ch = bch
             while (x < xl)
-              cell = lines[y][x]?
-              if (!cell)
+              if !lines_attr[y][x]?
                 break
               end
               if alpha = style.alpha?
-                lines[y][x].attr = Colors.blend(attr, lines[y][x].attr, alpha: alpha)
+                lines_attr[y][x] = Colors.blend(attr, lines_attr[y][x], alpha: alpha)
                 if content[ci - 1]?
-                  lines[y][x].char = ch
+                  lines_char[y][x] = ch
+                  lines_char[y].dirty = true
                 end
-                lines[y].dirty = true
+                lines_attr[y].dirty = true
               else
-                if cell != {attr, ch}
-                  lines[y][x].attr = attr
-                  lines[y][x].char = ch
-                  lines[y].dirty = true
+                if lines_attr[y][x] != attr
+                  lines_attr[y][x] = attr
+                  lines_attr[y].dirty = true
+                end
+                if lines_char[y][x] != ch
+                  lines_char[y][x] = ch
+                  lines_char[y].dirty = true
                 end
               end
               x += 1
@@ -320,16 +323,19 @@ module Crysterm
           end
 
           if alpha = style.alpha?
-            lines[y][x].attr = Colors.blend(attr, lines[y][x].attr, alpha: alpha)
+            lines_attr[y][x] = Colors.blend(attr, lines_attr[y][x], alpha: alpha)
             if content[ci - 1]?
-              lines[y][x].char = ch
+              lines_char[y][x] = ch
             end
-            lines[y].dirty = true
+            lines_attr[y].dirty = true
           else
-            if cell != {attr, ch}
-              lines[y][x].attr = attr
-              lines[y][x].char = ch
-              lines[y].dirty = true
+            if lines_attr[y][x] != attr
+              lines_attr[y][x] = attr
+              lines_attr[y].dirty = true
+            end
+            if lines_char[y][x] != ch
+              lines_char[y][x] = ch
+              lines_char[y].dirty = true
             end
           end
         end
@@ -363,8 +369,8 @@ module Crysterm
           # XXX The '?' was added ad-hoc to prevent exceptions when something goes out of
           # bounds (e.g. size of widget given too small for content).
           # Is there any better way to handle?
-          lines[y]?.try do |line|
-            line.[x]?.try do |cell|
+          lines_attr[y]?.try do
+            lines_attr[y][x]?.try do
               if @track
                 ch = style.track.char
                 attr = sattr style.track, style.track.fg, style.track.bg
@@ -374,10 +380,13 @@ module Crysterm
               ch = style.scrollbar.char
               attr = sattr style.scrollbar, style.scrollbar.fg, style.scrollbar.bg
 
-              if cell != {attr, ch}
-                cell.attr = attr
-                cell.char = ch
-                line.dirty = true
+              if lines_attr[y][x] != attr
+                lines_attr[y][x] = attr
+                lines_attr[y].dirty = true
+              end
+              if lines_char[y][x] != ch
+                lines_char[y][x] = ch
+                lines_char[y].dirty = true
               end
             end
           end
@@ -404,7 +413,7 @@ module Crysterm
         battr = sattr border
 
         [yi, yl - 1].each do |y|
-          next if y == -1 || !lines[y]?
+          next if y == -1 || !lines_attr[y]?
 
           if y == yi && coords.no_top?
             next
@@ -416,32 +425,36 @@ module Crysterm
             next if coords.no_left? && x == xi
             next if coords.no_right? && x == xl - 1
 
-            cell = lines[y][x]?
-            next unless cell
+            next unless lines_attr[y][x]?
 
             ch = border_char(border, x, xi, xl, y, yi, yl, default_attr)
 
-            if cell != {battr, ch}
-              cell.attr = battr
-              cell.char = ch
-              lines[y].dirty = true
+            if lines_attr[y][x] != battr
+              lines_attr[y][x] = battr
+              lines_attr[y].dirty = true
+            end
+            if lines_char[y][x] != ch
+              lines_char[y][x] = ch
+              lines_char[y].dirty = true
             end
           end
         end
 
         (yi + 1...yl - 1).each do |y|
-          next unless lines[y]?
+          next unless lines_attr[y]?
 
           [xi, xl - 1].each do |x|
-            cell = lines[y][x]?
-            next unless cell
+            next unless lines_attr[y][x]?
 
             ch = border_char(border, x, xi, xl, y, yi, yl, default_attr)
 
-            if cell != {battr, ch}
-              cell.attr = battr
-              cell.char = ch
-              lines[y].dirty = true
+            if lines_attr[y][x] != battr
+              lines_attr[y][x] = battr
+              lines_attr[y].dirty = true
+            end
+            if lines_char[y][x] != ch
+              lines_char[y][x] = ch
+              lines_char[y].dirty = true
             end
           end
         end
@@ -454,14 +467,14 @@ module Crysterm
           l = s.bottom? ? yl + s.bottom : yl - (s.top? && !s.bottom? ? s.top : 0)
 
           (Math.max(i, 0)...l).each do |y|
-            break unless lines[y]?
+            break unless lines_attr[y]?
 
             x = xi - s.left
             while x < xi
-              break unless lines[y][x]?
+              break unless lines_attr[y][x]?
 
-              lines[y][x].attr = Colors.blend(lines[y][x].attr, alpha: s.alpha)
-              lines[y].dirty = true
+              lines_attr[y][x] = Colors.blend(lines_attr[y][x], alpha: s.alpha)
+              lines_attr[y].dirty = true
               x += 1
             end
           end
@@ -471,13 +484,13 @@ module Crysterm
           l = s.right? ? xl + s.right : (s.left? ? xl - s.left : xl)
 
           (yi - s.top...yi).each do |y|
-            break unless lines[y]?
+            break unless lines_attr[y]?
 
             (Math.max(xi, 0)...l).each do |x|
-              break unless lines[y][x]?
+              break unless lines_attr[y][x]?
 
-              lines[y][x].attr = Colors.blend(lines[y][x].attr, alpha: s.alpha)
-              lines[y].dirty = true
+              lines_attr[y][x] = Colors.blend(lines_attr[y][x], alpha: s.alpha)
+              lines_attr[y].dirty = true
             end
           end
         end
@@ -487,14 +500,14 @@ module Crysterm
           l = s.bottom? ? yl + s.bottom : yl
 
           (Math.max(i, 0)...l).each do |y|
-            break unless lines[y]?
+            break unless lines_attr[y]?
 
             x = xl
             while x < xl + s.right
-              break unless lines[y][x]?
+              break unless lines_attr[y][x]?
 
-              lines[y][x].attr = Colors.blend(lines[y][x].attr, alpha: s.alpha)
-              lines[y].dirty = true
+              lines_attr[y][x] = Colors.blend(lines_attr[y][x], alpha: s.alpha)
+              lines_attr[y].dirty = true
               x += 1
             end
           end
@@ -505,13 +518,13 @@ module Crysterm
           l = xl - (s.left? && !s.top? && !s.right? ? s.left : 0)
 
           (yl...yl + s.bottom).each do |y|
-            break unless lines[y]?
+            break unless lines_attr[y]?
 
             (Math.max(i, 0)...l).each do |x|
-              break unless lines[y][x]?
+              break unless lines_attr[y][x]?
 
-              lines[y][x].attr = Colors.blend(lines[y][x].attr, alpha: s.alpha)
-              lines[y].dirty = true
+              lines_attr[y][x] = Colors.blend(lines_attr[y][x], alpha: s.alpha)
+              lines_attr[y].dirty = true
             end
           end
         end
