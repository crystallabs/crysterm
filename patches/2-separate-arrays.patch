
WIP, but usable if this is the way to go.

This patch splits @lines into @lines_attr and @lines_char.

diff --git a/src/screen.cr b/src/screen.cr
index ddac880..9a28639 100644
--- a/src/screen.cr
+++ b/src/screen.cr
@@ -340,17 +340,18 @@ module Crysterm
       # is causing dirty=true (and/or the logic how it is applied below) to not work correctly, so that
       # a re-creation was necessary on resize. Remains to be checked whether any further errors related
       # to this code and/or dirty= will come up or not.
-      old_height = @lines.size
+      old_height = @lines_attr.size
       new_height = aheight
 
-      old_width = @lines[0]?.try(&.size) || 0
+      old_width = @lines_attr[0]?.try(&.size) || 0
       new_width = awidth
 
       if !dirty
         do_clear = false
       else
         do_clear = true
-        @lines = Array(Row).new
+        @lines_attr = Array(Row(Int32)).new
+        @lines_char = Array(Row(Char)).new
         old_height = 0
         old_width = 0
       end
@@ -360,9 +361,12 @@ module Crysterm
         do_clear = true
 
         Math.min(old_height, new_height).times do |i|
-          adjust_width @lines[i], old_width, new_width, dirty
-          @lines[-1].dirty = dirty
-          @olines[-1].dirty = dirty
+          adjust_width @lines_attr[i], old_width, new_width, dirty
+          adjust_width @lines_char[i], old_width, new_width, dirty
+          @lines_attr[-1].dirty = dirty
+          @lines_char[-1].dirty = dirty
+          @olines_attr[-1].dirty = dirty
+          @olines_char[-1].dirty = dirty
         end
       end
 
@@ -386,20 +390,29 @@ module Crysterm
 
     @[AlwaysInline]
     private def add_row(dirty)
-      col = Row.new
-      adjust_width col, 0, awidth, dirty
-      @lines.push col
-      @lines[-1].dirty = dirty
-
-      col = Row.new
-      adjust_width col, 0, awidth, dirty
-      @olines.push col
-      @olines[-1].dirty = dirty
+      col_attr = Row(Int32).new
+      col_char = Row(Char).new
+      adjust_width col_attr, 0, awidth, dirty
+      adjust_width col_char, 0, awidth, dirty
+      @lines_attr.push col_attr
+      @lines_char.push col_char
+      @lines_attr[-1].dirty = dirty
+      @lines_char[-1].dirty = dirty
+
+      col_attr = Row(Int32).new
+      col_char = Row(Char).new
+      adjust_width col_attr, 0, awidth, dirty
+      adjust_width col_char, 0, awidth, dirty
+      @olines_attr.push col_attr
+      @olines_char.push col_char
+      @olines_attr[-1].dirty = dirty
+      @olines_char[-1].dirty = dirty
     end
 
     @[AlwaysInline]
     private def remove_row
-      @lines.pop
+      @lines_attr.pop
+      @lines_char.pop
     end
 
     @[AlwaysInline]
@@ -407,13 +420,18 @@ module Crysterm
       diff = new_width - old_width
       if diff > 0
         diff.times do
-          line.push Cell.new
+          if line.is_a? Row(Int32)
+            line.push default_attr
+          else
+            line.push default_char
+          end
         end
       elsif diff < 0
         (diff * -1).times do
           line.pop
         end
       end
+      true
     end
 
     # Reallocates screen buffers and clear the screen.
diff --git a/src/screen_angles.cr b/src/screen_angles.cr
index 9b14418..6f11a66 100644
--- a/src/screen_angles.cr
+++ b/src/screen_angles.cr
@@ -84,52 +84,52 @@ module Crysterm
     # you're asking for.
     def _get_angle(lines, x, y)
       angle = 0
-      attr = lines[y][x].attr
-      ch = lines[y][x].char
+      attr = lines_attr[y][x]
+      ch = lines_char[y][x]
 
-      if (lines[y][x - 1]? && @langles[lines[y][x - 1].char]?)
-        if (lines[y][x - 1].attr != attr)
+      if (lines[y][x - 1]? && @langles[lines_char[y][x - 1]]?)
+        if (lines_attr[y][x - 1] != attr)
           case @dock_contrast
           when DockContrast::DontDock
             return ch
           when DockContrast::Blend
-            lines[y][x].attr = Colors.blend lines[y][x - 1].attr, attr
+            lines_attr[y][x] = Colors.blend lines_attr[y][x - 1], attr
           end
         end
         angle |= 1 << 3
       end
 
-      if (lines[y - 1]? && @uangles[lines[y - 1][x].char]?)
-        if (lines[y - 1][x].attr != attr)
+      if (lines_attr[y - 1]? && @uangles[lines_char[y - 1][x]]?)
+        if (lines_attr[y - 1][x] != attr)
           case @dock_contrast
           when DockContrast::DontDock
             return ch
           when DockContrast::Blend
-            lines[y][x].attr = Colors.blend lines[y - 1][x].attr, attr
+            lines_attr[y][x] = Colors.blend lines_attr[y - 1][x], attr
           end
         end
         angle |= 1 << 2
       end
 
-      if (lines[y][x + 1]? && @rangles[lines[y][x + 1].char]?)
-        if (lines[y][x + 1].attr != attr)
+      if (lines[y][x + 1]? && @rangles[lines_char[y][x + 1]]?)
+        if (lines_attr[y][x + 1] != attr)
           case @dock_contrast
           when DockContrast::DontDock
             return ch
           when DockContrast::Blend
-            lines[y][x].attr = Colors.blend lines[y][x + 1].attr, attr
+            lines_attr[y][x] = Colors.blend lines_attr[y][x + 1], attr
           end
         end
         angle |= 1 << 1
       end
 
-      if (lines[y + 1]? && @dangles[lines[y + 1][x].char]?)
-        if (lines[y + 1][x].attr != attr)
+      if (lines[y + 1]? && @dangles[lines_char[y + 1][x]]?)
+        if (lines_attr[y + 1][x] != attr)
           case @dock_contrast
           when DockContrast::DontDock
             return ch
           when DockContrast::Blend
-            lines[y][x].attr = Colors.blend lines[y + 1][x].attr, attr
+            lines_attr[y][x] = Colors.blend lines_attr[y + 1][x], attr
           end
         end
         angle |= 1 << 0
@@ -143,15 +143,15 @@ module Crysterm
       # +-------+  |
       # |          |
       # +----------+
-      # if uangles[lines[y][x].char]
-      #   if lines[y + 1] && @dangles[lines[y + 1][x].char]
+      # if uangles[lines_char[y][x]]
+      #   if lines[y + 1] && @dangles[lines_char[y + 1][x]]
       #     case @dock_contrast
       #     when DockContrast::DontDock
-      #       if lines[y + 1][x].attr != attr
+      #       if lines_attr[y + 1][x] != attr
       #         return ch
       #       end
       #     when DockContrast::Blend
-      #       lines[y][x].attr = Colors.blend lines[y + 1][x].attr, attr
+      #       lines_attr[y][x] = Colors.blend lines_attr[y + 1][x], attr
       #     end
       #     angle |= 1 << 0
       #   end
diff --git a/src/screen_drawing.cr b/src/screen_drawing.cr
index 2ce0cac..df2cf90 100644
--- a/src/screen_drawing.cr
+++ b/src/screen_drawing.cr
@@ -24,7 +24,7 @@ module Crysterm
     @post = IO::Memory.new 1024
 
     # Draws the screen based on the contents of in-memory grid of cells (`@lines`).
-    def draw(start = 0, stop = @lines.size - 1)
+    def draw(start = 0, stop = @lines_attr.size - 1)
       # D O:
       # emit Event::PreDraw
 
@@ -47,20 +47,23 @@ module Crysterm
       # For all rows (y = row coordinate)
       (start..stop).each do |y|
         # Current line we're looking at, which we'll possibly modify (array of cells)
-        line = @lines[y]
+        line_attr = @lines_attr[y]
+        line_char = @lines_char[y]
 
         # Original line, as it was in the previous render
-        o = @olines[y]
+        o_attr = @olines_attr[y]
+        o_char = @olines_char[y]
 
         # Log.trace { line } if line.any? &.char.!=(' ')
 
         # Skip if no change in line
-        if (!line.dirty && !(c.artificial? && (y == tput.cursor.y)))
+        if (!line_attr.dirty && !line_char.dirty && !(c.artificial? && (y == tput.cursor.y)))
           next
         end
 
         # We're processing this line, so mark it as not dirty now.
-        line.dirty = false
+        line_attr.dirty = false
+        line_char.dirty = false
 
         # Assume line is dirty by continuing:
         # XXX maybe need to optimize to draw only dirty parts, not the whole line?
@@ -71,10 +74,10 @@ module Crysterm
         attr = @default_attr
 
         # For all cells in row (x = column coordinate)
-        line.size.times do |x|
+        line_attr.size.times do |x|
           # Desired attr code and char
-          desired_attr = line[x].attr
-          desired_char = line[x].char
+          desired_attr = line_attr[x]
+          desired_char = line_char[x]
 
           # Render the artificial cursor.
           if (c.artificial? && !c._hidden && (c._state != 0) && (x == tput.cursor.x) && (y == tput.cursor.y))
@@ -92,12 +95,12 @@ module Crysterm
             clr = true
             neq = false # Current line 'not equal' to line as it was on previous render (i.e. it changed content)
 
-            (x...line.size).each do |xx|
-              if line[xx] != {desired_attr, ' '}
+            (x...line_attr.size).each do |xx|
+              if line_attr[xx] != desired_attr || (line_char[xx] != ' ')
                 clr = false
                 break
               end
-              if line[xx] != o[xx]
+              if line_attr[xx] != o_attr[xx] || (line_char[xx] != o_char[xx])
                 neq = true
               end
             end
@@ -121,9 +124,9 @@ module Crysterm
               end
               #### #### ####
 
-              (x...line.size).each do |xx|
-                o[xx].attr = desired_attr
-                o[xx].char = ' '
+              (x...line_attr.size).each do |xx|
+                o_attr[xx] = desired_attr
+                o_char[xx] = ' '
               end
 
               break
@@ -174,8 +177,8 @@ module Crysterm
 
           # Optimize by comparing the real output
           # buffer to the pending output buffer.
-          o[x]?.try do |ox|
-            if ox == {desired_attr, desired_char}
+          o_attr[x]?.try do |ox|
+            if ox == desired_attr && (o_char[x] == desired_char)
               if lx == -1
                 lx = x
                 ly = y
@@ -190,8 +193,8 @@ module Crysterm
               lx = -1
               ly = -1
             end
-            ox.attr = desired_attr
-            ox.char = desired_char
+            o_attr[x] = desired_attr
+            o_char[x] = desired_char
           end
 
           if desired_attr != attr
@@ -432,8 +435,14 @@ module Crysterm
       # emit Event::Draw
     end
 
-    def blank_line(ch = ' ', dirty = false)
-      o = Row.new awidth, {@default_attr, ch}
+    def blank_line_attr(attr = @default_attr, dirty = false)
+      o = Row(Int32).new awidth, @default_attr
+      o.dirty = dirty
+      o
+    end
+
+    def blank_line_char(ch = ' ', dirty = false)
+      o = Row(Char).new awidth, ch
       o.dirty = dirty
       o
     end
@@ -465,10 +474,15 @@ module Crysterm
       j = bottom + 1
 
       n.times do
-        @lines.insert y, blank_line
-        @lines.delete_at j
-        @olines.insert y, blank_line
-        @olines.delete_at j
+        @lines_attr.insert y, blank_line_attr
+        @lines_attr.delete_at j
+        @olines_attr.insert y, blank_line_attr
+        @olines_attr.delete_at j
+
+        @lines_char.insert y, blank_line_char
+        @lines_char.delete_at j
+        @olines_char.insert y, blank_line_char
+        @olines_char.delete_at j
       end
     end
 
@@ -497,10 +511,15 @@ module Crysterm
       j = bottom + 1
 
       n.times do
-        @lines.insert y, blank_line
-        @lines.delete_at j
-        @olines.insert y, blank_line
-        @olines.delete_at j
+        @lines_attr.insert y, blank_line_attr
+        @lines_attr.delete_at j
+        @olines_attr.insert y, blank_line_attr
+        @olines_attr.delete_at j
+
+        @lines_char.insert y, blank_line_char
+        @lines_char.delete_at j
+        @olines_char.insert y, blank_line_char
+        @olines_char.delete_at j
       end
     end
 
@@ -532,10 +551,15 @@ module Crysterm
       # j = bottom + 1 # Unused
       while n > 0
         n -= 1
-        @lines.insert y, blank_line
-        @lines.delete_at y
-        @olines.insert y, blank_line
-        @olines.delete_at y
+        @lines_attr.insert y, blank_line_attr
+        @lines_attr.delete_at y
+        @olines_attr.insert y, blank_line_attr
+        @olines_attr.delete_at y
+
+        @lines_char.insert y, blank_line_char
+        @lines_char.delete_at y
+        @olines_char.insert y, blank_line_char
+        @olines_char.delete_at y
       end
     end
 
@@ -565,10 +589,15 @@ module Crysterm
       j = bottom + 1
 
       n.times do
-        @lines.insert j, blank_line
-        @lines.delete_at y
-        @olines.insert j, blank_line
-        @olines.delete_at y
+        @lines_attr.insert j, blank_line_attr
+        @lines_attr.delete_at y
+        @olines_attr.insert j, blank_line_attr
+        @olines_attr.delete_at y
+
+        @lines_char.insert j, blank_line_char
+        @lines_char.delete_at y
+        @olines_char.insert j, blank_line_char
+        @olines_char.delete_at y
       end
     end
 
@@ -669,16 +698,18 @@ module Crysterm
 
       x = pos.xi - 1
       while x >= 0
-        if (!@olines[yi]?)
+        if (!@olines_attr[yi]?)
           break
         end
-        first = @olines[yi][x]
+        first_attr = @olines_attr[yi][x]
+        first_char = @olines_char[yi][x]
         (yi...yl).each do |y|
-          if (!@olines[y]? || !@olines[y][x]?)
+          if (!@olines_attr[y]? || !@olines_attr[y][x]?)
             break
           end
-          ch = @olines[y][x]
-          if ch != first
+          ch_attr = @olines_attr[y][x]
+          ch_char = @olines_char[y][x]
+          if ch_attr != first_attr || (ch_char != first_char)
             return pos._clean_sides = false
           end
         end
@@ -686,16 +717,18 @@ module Crysterm
       end
 
       (pos.xl...awidth).each do |x2|
-        if (!@olines[yi]?)
+        if (!@olines_attr[yi]?)
           break
         end
-        first = @olines[yi][x2]
+        first_attr = @olines_attr[yi][x2]
+        first_char = @olines_char[yi][x2]
         (yi...yl).each do |y|
-          if (!@olines[y] || !@olines[y][x2])
+          if (!@olines_attr[y] || !@olines_attr[y][x2])
             break
           end
-          ch = @olines[y][x2]
-          if ch != first
+          ch_attr = @olines_attr[y][x2]
+          ch_char = @olines_char[y][x2]
+          if ch_attr != first_attr || (ch_char != first_char)
             return pos._clean_sides = false
           end
         end
@@ -712,7 +745,8 @@ module Crysterm
 
     # Fills any chosen region on the screen with chosen character and attributes.
     def fill_region(attr, ch, xi, xl, yi, yl, override = false)
-      lines = @lines
+      lines_attr = @lines_attr
+      lines_char = @lines_char
 
       if (xi < 0)
         xi = 0
@@ -722,17 +756,23 @@ module Crysterm
       end
 
       while yi < yl
-        break unless @lines[yi]?
+        break unless @lines_attr[yi]?
 
         xx = xi
         while xx < xl
-          cell = lines[yi][xx]?
-          break unless cell
-
-          if override || cell != {attr, ch}
-            lines[yi][xx].attr = attr
-            lines[yi][xx].char = ch
-            lines[yi].dirty = true
+          cell_attr = lines_attr[yi][xx]?
+          cell_char = lines_char[yi][xx]?
+          break unless cell_attr
+
+          if override || (cell_attr != attr)
+            lines_attr[yi][xx] = attr
+            lines_attr[yi].dirty = true
+            lines_char[yi].dirty = true
+          end
+          if override || (cell_attr != attr)
+            lines_char[yi][xx] = ch
+            lines_attr[yi].dirty = true
+            lines_char[yi].dirty = true
           end
 
           xx += 1
diff --git a/src/screen_rendering.cr b/src/screen_rendering.cr
index 48c3379..3975f0e 100644
--- a/src/screen_rendering.cr
+++ b/src/screen_rendering.cr
@@ -67,6 +67,8 @@ module Crysterm
     # Default cell attribute
     property default_attr : Int32 = ((0 << 18) | (0x1ff << 9)) | 0x1ff
 
+    property default_char = ' '
+
     # Automatically "dock" borders with other elements instead of overlapping,
     # depending on position.
     #     These border-overlapped elements:
@@ -84,11 +86,13 @@ module Crysterm
     # multi-colored borders.
     @dock_contrast = DockContrast::Blend
 
-    property lines = Array(Row).new
-    property olines = Array(Row).new
+    property lines_attr = Array(Row(Int32)).new
+    property lines_char = Array(Row(Char)).new
+    property olines_attr = Array(Row(Int32)).new
+    property olines_char = Array(Row(Char)).new
 
     def _dock_borders
-      lines = @lines
+      lines_char = @lines_char
       stops = @_border_stops
       # i
       # y
@@ -103,21 +107,21 @@ module Crysterm
       #
       # for (i = 0; i < keys.length; i++)
       #   y = keys[i]
-      #   if (!lines[y]) continue
+      #   if (!lines_char[y]) continue
       #   stop = this._borderStops[y]
       #   for (x = stop.xi; x < stop.xl; x++)
 
       stops = stops.keys.map(&.to_i).sort { |a, b| a - b }
 
       stops.each do |y|
-        if (!lines[y]?)
+        if (!lines_char[y]?)
           next
         end
         awidth.times do |x|
-          ch = lines[y][x].char
+          ch = lines_char[y][x]
           if @angles[ch]?
-            lines[y][x].char = _get_angle lines, x, y
-            lines[y].dirty = true
+            lines_char[y][x] = _get_angle lines_char, x, y
+            lines_char[y].dirty = true
           end
         end
       end
diff --git a/src/screen_rows.cr b/src/screen_rows.cr
index c943d0f..e0c8faf 100644
--- a/src/screen_rows.cr
+++ b/src/screen_rows.cr
@@ -2,48 +2,15 @@ module Crysterm
   class Screen
     # Screen rows and cells
 
-    # Individual screen cell
-    class Cell
-      include Comparable(self)
-      # Same as @default_attr
-      property attr : Int32 = ((0 << 18) | (0x1ff << 9)) | 0x1ff
-      property char : Char = ' '
-
-      def initialize(@attr, @char)
-      end
-
-      def initialize(@char)
-      end
-
-      def initialize
-      end
-
-      def <=>(other : Cell)
-        if (d = @attr <=> other.attr) == 0
-          @char <=> other.char
-        else
-          d
-        end
-      end
-
-      def <=>(other : Tuple(Int32, Char))
-        if (d = @attr <=> other[0]) == 0
-          @char <=> other[1]
-        else
-          d
-        end
-      end
-    end
-
     # Individual screen row
-    class Row < Array(Cell)
+    class Row(T) < Array(T)
       property dirty = false
 
       def initialize
         super
       end
 
-      def initialize(width, cell : Cell | Tuple(Int32, Char) = {@attr, @char})
+      def initialize(width, cell : T)
         super width
       end
     end
diff --git a/src/widget/bigtext.cr b/src/widget/bigtext.cr
index 88beb25..ab58192 100644
--- a/src/widget/bigtext.cr
+++ b/src/widget/bigtext.cr
@@ -116,7 +116,8 @@ module Crysterm
         coords = _render
         return unless coords
 
-        lines = screen.lines
+        lines_attr = screen.lines_attr
+        lines_char = screen.lines_char
         left = coords.xi + ileft
         top = coords.yi + itop
         right = coords.xl - iright
@@ -154,19 +155,20 @@ module Crysterm
               mcell = mline[mx]?
               break if mcell.nil?
 
-              lines[y]?.try(&.[x + mx]?).try do |cell|
+              lines_attr[y]?.try(&.[x + mx]?).try do |cell|
                 if (style.fchar != ' ')
-                  cell.attr = default_attr
-                  cell.char = mcell == 1 ? style.fchar : style.char
+                  lines_attr[y][x + mx] = default_attr
+                  lines_char[y][x + mx] = mcell == 1 ? style.fchar : style.char
                 else
-                  cell.attr = mcell == 1 ? attr : default_attr
-                  cell.char = mcell == 1 ? ' ' : style.char
+                  lines_attr[y][x + mx] = mcell == 1 ? attr : default_attr
+                  lines_char[y][x + mx] = mcell == 1 ? ' ' : style.char
                 end
               end
 
               mx += 1
             end
-            lines[y]?.try &.dirty = true
+            lines_attr[y]?.try &.dirty = true
+            lines_char[y]?.try &.dirty = true
 
             y += 1
           end
diff --git a/src/widget/progressbar.cr b/src/widget/progressbar.cr
index 99c1461..ac1c214 100644
--- a/src/widget/progressbar.cr
+++ b/src/widget/progressbar.cr
@@ -87,13 +87,13 @@ module Crysterm
         # Why here the formatted content is only in @_pcontent, while in blessed
         # it appears to be in `this.content` directly?
         if (pc = @_pcontent) && !pc.empty?
-          screen.lines[yi]?.try do |line|
+          screen.lines_char[yi]?.try do |line_char|
             pc.each_char_with_index do |c, i|
-              line[xi + i]?.try do |cell|
-                cell.char = c
+              line_char[xi + i]?.try do
+                line_char[xi + i] = c
               end
             end
-            line.dirty = true
+            line_char.dirty = true
           end
         end
 
diff --git a/src/widget_rendering.cr b/src/widget_rendering.cr
index 90a353b..477d26e 100644
--- a/src/widget_rendering.cr
+++ b/src/widget_rendering.cr
@@ -58,7 +58,8 @@ module Crysterm
         return
       end
 
-      lines = screen.lines
+      lines_attr = screen.lines_attr
+      lines_char = screen.lines_char
       xi = coords.xi
       xl = coords.xl
       yi = coords.yi
@@ -155,17 +156,17 @@ module Crysterm
       if style.padding || !@align.top?
         if alpha = style.alpha?
           (Math.max(yi, 0)...yl).each do |y|
-            if !lines[y]?
+            if !lines_attr[y]?
               break
             end
             (Math.max(xi, 0)...xl).each do |x|
-              if !lines[y][x]?
+              if !lines_attr[y][x]?
                 break
               end
-              lines[y][x].attr = Colors.blend(attr, lines[y][x].attr, alpha: alpha)
+              lines_attr[y][x] = Colors.blend(attr, lines_attr[y][x], alpha: alpha)
               # D O:
               # lines[y][x].char = bch
-              lines[y].dirty = true
+              lines_attr[y].dirty = true
             end
           end
         else
@@ -197,7 +198,7 @@ module Crysterm
       # Draw the content and background.
       # yi.step to: yl-1 do |y|
       (yi...yl).each do |y|
-        if (!lines[y]?)
+        if (!lines_attr[y]?)
           if (y >= screen.aheight || yl < ibottom)
             break
           else
@@ -208,7 +209,7 @@ module Crysterm
         x = xi - 1
         while x < xl - 1
           x += 1
-          cell = lines[y][x]?
+          cell = lines_attr[y][x]?
           unless cell
             if x >= screen.awidth || xl < iright
               break
@@ -263,21 +264,23 @@ module Crysterm
             # outer loop, and continue to it instead.
             ch = bch
             while (x < xl)
-              cell = lines[y][x]?
+              cell = lines_attr[y][x]?
               if (!cell)
                 break
               end
               if alpha = style.alpha?
-                lines[y][x].attr = Colors.blend(attr, lines[y][x].attr, alpha: alpha)
+                lines_attr[y][x] = Colors.blend(attr, lines_attr[y][x], alpha: alpha)
                 if content[ci - 1]?
-                  lines[y][x].char = ch
+                  lines_char[y][x] = ch
                 end
-                lines[y].dirty = true
+                lines_attr[y].dirty = true
+                lines_char[y].dirty = true
               else
                 if cell != {attr, ch}
-                  lines[y][x].attr = attr
-                  lines[y][x].char = ch
-                  lines[y].dirty = true
+                  lines_attr[y][x] = attr
+                  lines_char[y][x] = ch
+                  lines_attr[y].dirty = true
+                  lines_char[y].dirty = true
                 end
               end
               x += 1
@@ -321,16 +324,18 @@ module Crysterm
           end
 
           if alpha = style.alpha?
-            lines[y][x].attr = Colors.blend(attr, lines[y][x].attr, alpha: alpha)
+            lines_attr[y][x] = Colors.blend(attr, lines_attr[y][x], alpha: alpha)
             if content[ci - 1]?
-              lines[y][x].char = ch
+              lines_char[y][x] = ch
             end
-            lines[y].dirty = true
+            lines_attr[y].dirty = true
+            lines_char[y].dirty = true
           else
             if cell != {attr, ch}
-              lines[y][x].attr = attr
-              lines[y][x].char = ch
-              lines[y].dirty = true
+              lines_attr[y][x] = attr
+              lines_char[y][x] = ch
+              lines_attr[y].dirty = true
+              lines_char[y].dirty = true
             end
           end
         end
@@ -364,7 +369,7 @@ module Crysterm
           # XXX The '?' was added ad-hoc to prevent exceptions when something goes out of
           # bounds (e.g. size of widget given too small for content).
           # Is there any better way to handle?
-          lines[y]?.try(&.[x]?).try do |cell|
+          lines_attr[y]?.try(&.[x]?).try do |cell|
             if @track
               ch = style.track.char # || ' '
               attr = sattr style.track, style.track.fg, style.track.bg
@@ -373,9 +378,10 @@ module Crysterm
             ch = style.scrollbar.char # || ' '
             attr = sattr style.scrollbar, style.scrollbar.fg, style.scrollbar.bg
             if cell != {attr, ch}
-              cell.attr = attr
-              cell.char = ch
-              lines[y]?.try &.dirty=(true)
+              lines_attr[y][x] = attr
+              lines_char[y][x] = ch
+              lines_attr[y].dirty=(true)
+              lines_char[y].dirty=(true)
             end
           end
         end
@@ -405,7 +411,7 @@ module Crysterm
           y = -1
         end
         (xi...xl).each do |x|
-          if (!lines[y]?)
+          if (!lines_attr[y]?)
             break
           end
           if coords.no_left? && (x == xi)
@@ -414,7 +420,7 @@ module Crysterm
           if coords.no_right? && (x == xl - 1)
             next
           end
-          cell = lines[y][x]?
+          cell = lines_attr[y][x]?
           if (!cell)
             next
           end
@@ -459,24 +465,26 @@ module Crysterm
           if (border.top == 0) && x != xi && x != xl - 1
             ch = ' '
             if cell != {default_attr, ch}
-              lines[y][x].attr = default_attr
-              lines[y][x].char = ch
-              lines[y].dirty = true
+              lines_attr[y][x] = default_attr
+              lines_char[y][x] = ch
+              lines_attr[y].dirty = true
+              lines_char[y].dirty = true
               next
             end
           end
           if cell != {battr, ch}
-            lines[y][x].attr = battr
-            lines[y][x].char = ch ? ch : ' ' # XXX why ch can be nil?
-            lines[y].dirty = true
+            lines_attr[y][x] = battr
+            lines_char[y][x] = (ch || ' ') # XXX why ch can be nil?
+              lines_attr[y].dirty = true
+              lines_char[y].dirty = true
           end
         end
         y = yi + 1
         while (y < yl - 1)
-          if (!lines[y]?)
+          if (!lines_attr[y]?)
             break
           end
-          cell = lines[y][xi]?
+          cell = lines_attr[y][xi]?
           if (cell)
             if border.left > 0
               if border.type.line?
@@ -487,21 +495,23 @@ module Crysterm
               end
               if !coords.no_left?
                 if cell != {battr, ch}
-                  lines[y][xi].attr = battr
-                  lines[y][xi].char = ch ? ch : ' '
-                  lines[y].dirty = true
+                  lines_attr[y][xi] = battr
+                  lines_char[y][xi] = (ch || ' ')
+                  lines_attr[y].dirty = true
+                  lines_char[y].dirty = true
                 end
               end
             else
               ch = ' '
               if cell != {default_attr, ch}
-                lines[y][xi].attr = default_attr
-                lines[y][xi].char = ch ? ch : ' '
-                lines[y].dirty = true
+                lines_attr[y][xi] = default_attr
+                lines_char[y][xi] = (ch || ' ')
+                lines_attr[y].dirty = true
+                lines_char[y].dirty = true
               end
             end
           end
-          cell = lines[y][xl - 1]?
+          cell = lines_attr[y][xl - 1]?
           if (cell)
             if border.right > 0
               if border.type.line?
@@ -512,17 +522,19 @@ module Crysterm
               end
               if !coords.no_right?
                 if cell != {battr, ch}
-                  lines[y][xl - 1].attr = battr
-                  lines[y][xl - 1].char = ch ? ch : ' '
-                  lines[y].dirty = true
+                  lines_attr[y][xl - 1] = battr
+                  lines_char[y][xl - 1] = (ch || ' ')
+                  lines_attr[y].dirty = true
+                  lines_char[y].dirty = true
                 end
               end
             else
               ch = ' '
               if cell != {default_attr, ch}
-                lines[y][xl - 1].attr = default_attr
-                lines[y][xl - 1].char = ch ? ch : ' '
-                lines[y].dirty = true
+                lines_attr[y][xl - 1] = default_attr
+                lines_char[y][xl - 1] = (ch || ' ')
+                lines_attr[y].dirty = true
+                lines_char[y].dirty = true
               end
             end
           end
@@ -533,7 +545,7 @@ module Crysterm
           y = -1
         end
         (xi...xl).each do |x|
-          if (!lines[y]?)
+          if (!lines_attr[y]?)
             break
           end
           if coords.no_left? && (x == xi)
@@ -542,7 +554,7 @@ module Crysterm
           if coords.no_right? && (x == xl - 1)
             next
           end
-          cell = lines[y][x]?
+          cell = lines_attr[y][x]?
           if (!cell)
             next
           end
@@ -587,16 +599,18 @@ module Crysterm
           if (border.bottom == 0) && x != xi && x != xl - 1
             ch = ' '
             if cell != {default_attr, ch}
-              lines[y][x].attr = default_attr
-              lines[y][x].char = ch ? ch : ' '
-              lines[y].dirty = true
+              lines_attr[y][x] = default_attr
+              lines_char[y][x] = (ch || ' ')
+              lines_attr[y].dirty = true
+              lines_char[y].dirty = true
             end
             next
           end
           if cell != {battr, ch}
-            lines[y][x].attr = battr
-            lines[y][x].char = ch ? ch : ' '
-            lines[y].dirty = true
+            lines_attr[y][x] = battr
+            lines_char[y][x] = (ch || ' ')
+            lines_attr[y].dirty = true
+            lines_char[y].dirty = true
           end
         end
       end
@@ -609,18 +623,19 @@ module Crysterm
 
           y = Math.max(i, 0)
           while (y < l)
-            if (!lines[y]?)
+            if (!lines_attr[y]?)
               break
             end
             x = xi - s.left
             while (x < xi)
-              if (!lines[y][x]?)
+              if (!lines_attr[y][x]?)
                 break
               end
               # D O:
               # lines[y][x].attr = Colors.blend(@default_attr, lines[y][x].attr)
-              lines[y][x].attr = Colors.blend(lines[y][x].attr, alpha: s.alpha)
-              lines[y].dirty = true
+              lines_attr[y][x] = Colors.blend(lines_attr[y][x], alpha: s.alpha)
+              lines_attr[y].dirty = true
+              lines_char[y].dirty = true
               x += 1
             end
             y += 1
@@ -632,17 +647,18 @@ module Crysterm
 
           y = yi - s.top
           while (y < yi)
-            if (!lines[y]?)
+            if (!lines_attr[y]?)
               break
             end
             (Math.max(xi, 0)...(l)).each do |x2|
-              if (!lines[y][x2]?)
+              if (!lines_attr[y][x2]?)
                 break
               end
               # D O:
               # lines[y][x].attr = Colors.blend(@default_attr, lines[y][x].attr)
-              lines[y][x2].attr = Colors.blend(lines[y][x2].attr, alpha: s.alpha)
-              lines[y].dirty = true
+              lines_attr[y][x2] = Colors.blend(lines_attr[y][x2], alpha: s.alpha)
+              lines_attr[y].dirty = true
+              lines_char[y].dirty = true
             end
             y += 1
           end
@@ -654,18 +670,19 @@ module Crysterm
 
           y = Math.max(i, 0)
           while (y < l)
-            if (!lines[y]?)
+            if (!lines_attr[y]?)
               break
             end
             x = xl
             while (x < xl + s.right)
-              if (!lines[y][x]?)
+              if (!lines_attr[y][x]?)
                 break
               end
               # D O:
               # lines[y][x].attr = Colors.blend(@default_attr, lines[y][x].attr)
-              lines[y][x].attr = Colors.blend(lines[y][x].attr, alpha: s.alpha)
-              lines[y].dirty = true
+              lines_attr[y][x] = Colors.blend(lines_attr[y][x], alpha: s.alpha)
+              lines_attr[y].dirty = true
+              lines_char[y].dirty = true
               x += 1
             end
             y += 1
@@ -678,17 +695,18 @@ module Crysterm
 
           y = yl
           while (y < yl + s.bottom)
-            if (!lines[y]?)
+            if (!lines_attr[y]?)
               break
             end
             (Math.max(i, 0)...l).each do |x2|
-              if (!lines[y][x2]?)
+              if (!lines_attr[y][x2]?)
                 break
               end
               # D O:
               # lines[y][x].attr = Colors.blend(@default_attr, lines[y][x].attr)
-              lines[y][x2].attr = Colors.blend(lines[y][x2].attr, alpha: s.alpha)
-              lines[y].dirty = true
+              lines_attr[y][x2] = Colors.blend(lines_attr[y][x2], alpha: s.alpha)
+              lines_attr[y].dirty = true
+              lines_char[y].dirty = true
             end
             y += 1
           end
diff --git a/benchmarks/cells-vs-arrays.cr b/benchmarks/cells-vs-arrays.cr
new file mode 100644
index 0000000..a57de8e
--- /dev/null
+++ b/benchmarks/cells-vs-arrays.cr
@@ -0,0 +1,288 @@
+require "benchmark"
+
+require "../src/crysterm"
+
+# This tests performance of accessing a 2D grid that represents cells on the
+# screen. The original implementation from Blessed has cells represented as
+# chars to which it attaches an additional property 'attr'.
+#
+# In Crysterm this was ported over as `class Cell`. In search of ways to
+# optimize that, this test file was created.
+#
+# Results were:
+#                                             user     system      total        real
+# class Cell                               3.221470   0.001085   3.222555 (  3.251506)
+# struct Cell                              2.960962   0.000000   2.960962 (  2.993685)
+# separate arrays, combined access yx      1.208852   0.000000   1.208852 (  1.221377)
+# separate arrays, separate access yx      1.678196   0.000001   1.678197 (  1.693666)
+# separate arrays, combined access xy      2.278242   0.000000   2.278242 (  2.301951)
+# separate arrays, separate access xy      2.512557   0.000000   2.512557 (  2.550904)
+# separate 1d arrays, combined access yx   1.821288   0.000000   1.821288 (  1.850375)
+# separate 1d arrays, combined access xy   1.771367   0.000000   1.771367 (  1.808968)
+#
+# Which shows that the optimal way is to split the whole thing into 2 separate 2D
+# arrays (for attrs and cells) and to access them in [y][x] fashion, e.g:
+#
+# (ystart...yend) do |y|
+#   (xstart...xend) do |x|
+#      attrs[y][x] = val
+#      chars[y][x] = val
+#   end
+# end
+
+xs = 2000
+ys = 600
+reps = 1000000
+
+module Crysterm
+
+  # Equivalent of Cell, but done as a struct
+  struct Cell2
+    include Comparable(self)
+    getter attr : Int32 = ((0 << 18) | (0x1ff << 9)) | 0x1ff
+    getter char : Char = ' '
+
+    def attr=(@attr)
+      self
+    end
+    def char=(@char)
+      self
+    end
+
+    def initialize(@attr, @char)
+    end
+
+    def initialize(@char)
+    end
+
+    def initialize
+    end
+
+    def <=>(other : Cell)
+      if (d = @attr <=> other.attr) == 0
+        @char <=> other.char
+      else
+        d
+      end
+    end
+
+    def <=>(other : Tuple(Int32, Char))
+      if (d = @attr <=> other[0]) == 0
+        @char <=> other[1]
+      else
+        d
+      end
+    end
+
+  end
+
+  # Individual screen row
+  class Row2 < Array(Cell2)
+    property dirty = false
+
+    def initialize
+      super
+    end
+
+    def initialize(width, cell : Cell2 | Tuple(Int32, Char) = {@attr, @char})
+      super width
+    end
+  end
+
+  puts :running
+
+  # Set up cells (classes)
+  lines = Array(Screen::Row).new
+  ys.times do
+    row = Screen::Row.new
+    xs.times do
+      row.push Screen::Cell.new 0, 'x'
+    end
+    lines.push row
+  end
+
+  # Set up cells (structs)
+  lines2 = Array(Row2).new
+  ys.times do
+    row = Row2.new
+    xs.times do
+      row.push Cell2.new 0, 'x'
+    end
+    lines2.push row
+  end
+
+  # Set up cells as 2 separate things
+  lines3_attr = Array(Array(Int32)).new
+  lines3_char = Array(Array(Char)).new
+  ys.times do
+    row_attr = Array(Int32).new
+    row_char = Array(Char).new
+
+    xs.times do
+      row_attr.push 0
+      row_char.push 'x'
+    end
+    lines3_attr.push row_attr
+    lines3_char.push row_char
+  end
+
+  # Set up cells as 2 separate things
+  lines4_attr = Array(Int32).new
+  lines4_char = Array(Char).new
+  ( ys * xs ).times do
+    lines4_attr.push 0
+    lines4_char.push 'x'
+  end
+
+  Benchmark.bm do |x|
+
+    x.report "class Cell" do
+      reps.times do
+        xsize = 20 #Random.rand xs-1
+        xpos = Random.rand xs-1-xsize
+        ysize = 20 #Random.rand ys-1
+        ypos = Random.rand ys-1-ysize
+
+        # Iterate over the cells of the screen, setting them to something
+        (ypos...ypos+ysize).each do |y|
+          (xpos...xpos+xsize).each do |x|
+            lines[y][x].attr = 10
+            lines[y][x].char = 'e'
+          end
+        end
+      end
+    end
+
+    x.report "struct Cell" do
+      reps.times do
+        xsize = 20 #Random.rand xs-1
+        xpos = Random.rand xs-1-xsize
+        ysize = 20 #Random.rand ys-1
+        ypos = Random.rand ys-1-ysize
+
+        # Iterate over the cells of the screen, setting them to something
+        (ypos...ypos+ysize).each do |y|
+          (xpos...xpos+xsize).each do |x|
+            lines2[y][x] = lines2[y][x].attr = 10
+            lines2[y][x] = lines2[y][x].char = 'e'
+          end
+        end
+      end
+    end
+
+    x.report "separate arrays, combined access yx" do
+      reps.times do
+        xsize = 20 #Random.rand xs-1
+        xpos = Random.rand xs-1-xsize
+        ysize = 20 #Random.rand ys-1
+        ypos = Random.rand ys-1-ysize
+
+        # Iterate over the cells of the screen, setting them to something
+        (ypos...ypos+ysize).each do |y|
+          (xpos...xpos+xsize).each do |x|
+            lines3_attr[y][x] = 0
+            lines3_char[y][x] = 'e'
+          end
+        end
+      end
+    end
+
+    x.report "separate arrays, separate access yx" do
+      reps.times do
+        xsize = 20 #Random.rand xs-1
+        xpos = Random.rand xs-1-xsize
+        ysize = 20 #Random.rand ys-1
+        ypos = Random.rand ys-1-ysize
+
+        # Iterate over the cells of the screen, setting them to something
+        (ypos...ypos+ysize).each do |y|
+          (xpos...xpos+xsize).each do |x|
+            lines3_attr[y][x] = 0
+          end
+        end
+
+        # Iterate over the cells of the screen, setting them to something
+        (ypos...ypos+ysize).each do |y|
+          (xpos...xpos+xsize).each do |x|
+            lines3_char[y][x] = 'e'
+          end
+        end
+      end
+    end
+
+    x.report "separate arrays, combined access xy" do
+      reps.times do
+        xsize = 20 #Random.rand xs-1
+        xpos = Random.rand xs-1-xsize
+        ysize = 20 #Random.rand ys-1
+        ypos = Random.rand ys-1-ysize
+
+        # Iterate over the cells of the screen, setting them to something
+          (xpos...xpos+xsize).each do |x|
+        (ypos...ypos+ysize).each do |y|
+            lines3_attr[y][x] = 0
+            lines3_char[y][x] = 'e'
+          end
+        end
+      end
+    end
+
+    x.report "separate arrays, separate access xy" do
+      reps.times do
+        xsize = 20 #Random.rand xs-1
+        xpos = Random.rand xs-1-xsize
+        ysize = 20 #Random.rand ys-1
+        ypos = Random.rand ys-1-ysize
+
+        # Iterate over the cells of the screen, setting them to something
+          (xpos...xpos+xsize).each do |x|
+        (ypos...ypos+ysize).each do |y|
+            lines3_attr[y][x] = 0
+          end
+        end
+
+        # Iterate over the cells of the screen, setting them to something
+          (xpos...xpos+xsize).each do |x|
+        (ypos...ypos+ysize).each do |y|
+            lines3_char[y][x] = 'e'
+          end
+        end
+      end
+    end
+
+    x.report "separate 1d arrays, combined access yx" do
+      reps.times do
+        xsize = 20 #Random.rand xs-1
+        xpos = Random.rand xs-1-xsize
+        ysize = 20 #Random.rand ys-1
+        ypos = Random.rand ys-1-ysize
+
+        # Iterate over the cells of the screen, setting them to something
+        (ypos...ypos+ysize).each do |y|
+          (xpos...xpos+xsize).each do |x|
+            lines4_attr[y*x + x] = 0
+            lines4_char[y*x + x] = 'e'
+          end
+        end
+      end
+    end
+
+    x.report "separate 1d arrays, combined access xy" do
+      reps.times do
+        xsize = 20 #Random.rand xs-1
+        xpos = Random.rand xs-1-xsize
+        ysize = 20 #Random.rand ys-1
+        ypos = Random.rand ys-1-ysize
+
+        # Iterate over the cells of the screen, setting them to something
+          (xpos...xpos+xsize).each do |x|
+        (ypos...ypos+ysize).each do |y|
+            lines4_attr[y*x + x] = 0
+            lines4_char[y*x + x] = 'e'
+          end
+        end
+      end
+    end
+
+  end
+end
diff --git a/patches/README.md b/patches/README.md
new file mode 100644
index 0000000..8b165f9
--- /dev/null
+++ b/patches/README.md
@@ -0,0 +1,5 @@
+# Possible patches
+
+Collection of patches which do work at time of creation, but are alternative implementations or do not have the expected benefits.
+
+Any patch comments are included at the top of each patch.
diff --git a/patches/cells-as-structs.patch b/patches/cells-as-structs.patch
new file mode 100644
index 0000000..5e1cbc3
--- /dev/null
+++ b/patches/cells-as-structs.patch
@@ -0,0 +1,308 @@
+
+Currently, to represent the whole screen, each `Screen` has an array of `Line`s,
+of which each Line is an array of `Cell`.
+
+`Cell` is currently a class with 2 properties: char and attr. (Char is the letter
+written in it, attr is cell attribute - like fg/bg color, blink, underline, etc.)
+
+When `class Cell` was just replaced with `struct Cell`, it produced ~20% improvement.
+But it did not draw anything on the screen since copies of Cells were being adjusted.
+
+When the implementation was finalized to use struct Cell and have everything working,
+the performance has dropped to even below the implementation with `class Cell`.
+
+So the switch to `struct Cell` is postponed for the moment. A different approach is
+needed to speed things up. For example - instead of screen being represented as it
+is now with:
+
+  screen = array(line)
+  line = array(cell)
+
+Maybe it needs to be represented with say:
+
+  screen_chars = array(array(char))
+  screen_attrs = array(array(int32))
+
+Or even:
+
+  screen_chars = array(char)
+  screen_attrs = array(int32)
+
+With the index being calculated from y and x coordinate.
+
+diff --git a/src/screen_angles.cr b/src/screen_angles.cr
+index 9b14418..a1f3cff 100644
+--- a/src/screen_angles.cr
++++ b/src/screen_angles.cr
+@@ -93,7 +93,7 @@ module Crysterm
+           when DockContrast::DontDock
+             return ch
+           when DockContrast::Blend
+-            lines[y][x].attr = Colors.blend lines[y][x - 1].attr, attr
++            lines[y][x] = lines[y][x].attr = Colors.blend lines[y][x - 1].attr, attr
+           end
+         end
+         angle |= 1 << 3
+@@ -105,7 +105,7 @@ module Crysterm
+           when DockContrast::DontDock
+             return ch
+           when DockContrast::Blend
+-            lines[y][x].attr = Colors.blend lines[y - 1][x].attr, attr
++            lines[y][x] = lines[y][x].attr = Colors.blend lines[y - 1][x].attr, attr
+           end
+         end
+         angle |= 1 << 2
+@@ -117,7 +117,7 @@ module Crysterm
+           when DockContrast::DontDock
+             return ch
+           when DockContrast::Blend
+-            lines[y][x].attr = Colors.blend lines[y][x + 1].attr, attr
++            lines[y][x] = lines[y][x].attr = Colors.blend lines[y][x + 1].attr, attr
+           end
+         end
+         angle |= 1 << 1
+@@ -129,7 +129,7 @@ module Crysterm
+           when DockContrast::DontDock
+             return ch
+           when DockContrast::Blend
+-            lines[y][x].attr = Colors.blend lines[y + 1][x].attr, attr
++            lines[y][x] = lines[y][x].attr = Colors.blend lines[y + 1][x].attr, attr
+           end
+         end
+         angle |= 1 << 0
+@@ -151,7 +151,7 @@ module Crysterm
+       #         return ch
+       #       end
+       #     when DockContrast::Blend
+-      #       lines[y][x].attr = Colors.blend lines[y + 1][x].attr, attr
++      #       lines[y][x] = lines[y][x].attr = Colors.blend lines[y + 1][x].attr, attr
+       #     end
+       #     angle |= 1 << 0
+       #   end
+diff --git a/src/screen_rendering.cr b/src/screen_rendering.cr
+index 48c3379..df6667b 100644
+--- a/src/screen_rendering.cr
++++ b/src/screen_rendering.cr
+@@ -116,7 +116,7 @@ module Crysterm
+         awidth.times do |x|
+           ch = lines[y][x].char
+           if @angles[ch]?
+-            lines[y][x].char = _get_angle lines, x, y
++            lines[y][x] = lines[y][x].char = _get_angle lines, x, y
+             lines[y].dirty = true
+           end
+         end
+diff --git a/src/screen_rows.cr b/src/screen_rows.cr
+index c943d0f..1a4781f 100644
+--- a/src/screen_rows.cr
++++ b/src/screen_rows.cr
+@@ -6,8 +6,16 @@ module Crysterm
+     class Cell
+       include Comparable(self)
+       # Same as @default_attr
+-      property attr : Int32 = ((0 << 18) | (0x1ff << 9)) | 0x1ff
+-      property char : Char = ' '
++      getter attr : Int32 = ((0 << 18) | (0x1ff << 9)) | 0x1ff
++      getter char : Char = ' '
++
++      def attr=(@attr)
++        self
++      end
++
++      def char=(@char)
++        self
++      end
+ 
+       def initialize(@attr, @char)
+       end
+@@ -47,6 +55,5 @@ module Crysterm
+         super width
+       end
+     end
+-    # end
+   end
+ end
+diff --git a/src/widget/progressbar.cr b/src/widget/progressbar.cr
+index 99c1461..cbddf84 100644
+--- a/src/widget/progressbar.cr
++++ b/src/widget/progressbar.cr
+@@ -90,7 +90,7 @@ module Crysterm
+           screen.lines[yi]?.try do |line|
+             pc.each_char_with_index do |c, i|
+               line[xi + i]?.try do |cell|
+-                cell.char = c
++                line[xi + i] = cell.char = c
+               end
+             end
+             line.dirty = true
+diff --git a/src/widget_rendering.cr b/src/widget_rendering.cr
+index 90a353b..0fa6dbb 100644
+--- a/src/widget_rendering.cr
++++ b/src/widget_rendering.cr
+@@ -162,7 +162,7 @@ module Crysterm
+               if !lines[y][x]?
+                 break
+               end
+-              lines[y][x].attr = Colors.blend(attr, lines[y][x].attr, alpha: alpha)
++              lines[y][x] = lines[y][x].attr = Colors.blend(attr, lines[y][x].attr, alpha: alpha)
+               # D O:
+               # lines[y][x].char = bch
+               lines[y].dirty = true
+@@ -268,15 +268,15 @@ module Crysterm
+                 break
+               end
+               if alpha = style.alpha?
+-                lines[y][x].attr = Colors.blend(attr, lines[y][x].attr, alpha: alpha)
++                lines[y][x] = lines[y][x].attr = Colors.blend(attr, lines[y][x].attr, alpha: alpha)
+                 if content[ci - 1]?
+-                  lines[y][x].char = ch
++                  lines[y][x] = lines[y][x].char = ch
+                 end
+                 lines[y].dirty = true
+               else
+                 if cell != {attr, ch}
+-                  lines[y][x].attr = attr
+-                  lines[y][x].char = ch
++                  lines[y][x] = lines[y][x].attr = attr
++                  lines[y][x] = lines[y][x].char = ch
+                   lines[y].dirty = true
+                 end
+               end
+@@ -321,15 +321,15 @@ module Crysterm
+           end
+ 
+           if alpha = style.alpha?
+-            lines[y][x].attr = Colors.blend(attr, lines[y][x].attr, alpha: alpha)
++            lines[y][x] = lines[y][x].attr = Colors.blend(attr, lines[y][x].attr, alpha: alpha)
+             if content[ci - 1]?
+-              lines[y][x].char = ch
++              lines[y][x] = lines[y][x].char = ch
+             end
+             lines[y].dirty = true
+           else
+             if cell != {attr, ch}
+-              lines[y][x].attr = attr
+-              lines[y][x].char = ch
++              lines[y][x] = lines[y][x].attr = attr
++              lines[y][x] = lines[y][x].char = ch
+               lines[y].dirty = true
+             end
+           end
+@@ -459,15 +459,15 @@ module Crysterm
+           if (border.top == 0) && x != xi && x != xl - 1
+             ch = ' '
+             if cell != {default_attr, ch}
+-              lines[y][x].attr = default_attr
+-              lines[y][x].char = ch
++              lines[y][x] = lines[y][x].attr = default_attr
++              lines[y][x] = lines[y][x].char = ch
+               lines[y].dirty = true
+               next
+             end
+           end
+           if cell != {battr, ch}
+-            lines[y][x].attr = battr
+-            lines[y][x].char = ch ? ch : ' ' # XXX why ch can be nil?
++            lines[y][x] = lines[y][x].attr = battr
++            lines[y][x] = lines[y][x].char = (ch || ' ') # XXX why ch can be nil?
+             lines[y].dirty = true
+           end
+         end
+@@ -487,16 +487,16 @@ module Crysterm
+               end
+               if !coords.no_left?
+                 if cell != {battr, ch}
+-                  lines[y][xi].attr = battr
+-                  lines[y][xi].char = ch ? ch : ' '
++                  lines[y][xi] = lines[y][xi].attr = battr
++                  lines[y][xi] = lines[y][xi].char = (ch || ' ')
+                   lines[y].dirty = true
+                 end
+               end
+             else
+               ch = ' '
+               if cell != {default_attr, ch}
+-                lines[y][xi].attr = default_attr
+-                lines[y][xi].char = ch ? ch : ' '
++                lines[y][xi] = lines[y][xi].attr = default_attr
++                lines[y][xi] = lines[y][xi].char = (ch || ' ')
+                 lines[y].dirty = true
+               end
+             end
+@@ -512,16 +512,16 @@ module Crysterm
+               end
+               if !coords.no_right?
+                 if cell != {battr, ch}
+-                  lines[y][xl - 1].attr = battr
+-                  lines[y][xl - 1].char = ch ? ch : ' '
++                  lines[y][xl - 1] = lines[y][xl - 1].attr = battr
++                  lines[y][xl - 1] = lines[y][xl - 1].char = (ch || ' ')
+                   lines[y].dirty = true
+                 end
+               end
+             else
+               ch = ' '
+               if cell != {default_attr, ch}
+-                lines[y][xl - 1].attr = default_attr
+-                lines[y][xl - 1].char = ch ? ch : ' '
++                lines[y][xl - 1] = lines[y][xl - 1].attr = default_attr
++                lines[y][xl - 1] = lines[y][xl - 1].char = (ch || ' ')
+                 lines[y].dirty = true
+               end
+             end
+@@ -587,15 +587,15 @@ module Crysterm
+           if (border.bottom == 0) && x != xi && x != xl - 1
+             ch = ' '
+             if cell != {default_attr, ch}
+-              lines[y][x].attr = default_attr
+-              lines[y][x].char = ch ? ch : ' '
++              lines[y][x] = lines[y][x].attr = default_attr
++              lines[y][x] = lines[y][x].char = (ch || ' ')
+               lines[y].dirty = true
+             end
+             next
+           end
+           if cell != {battr, ch}
+-            lines[y][x].attr = battr
+-            lines[y][x].char = ch ? ch : ' '
++            lines[y][x] = lines[y][x].attr = battr
++            lines[y][x] = lines[y][x].char = (ch || ' ')
+             lines[y].dirty = true
+           end
+         end
+@@ -619,7 +619,7 @@ module Crysterm
+               end
+               # D O:
+               # lines[y][x].attr = Colors.blend(@default_attr, lines[y][x].attr)
+-              lines[y][x].attr = Colors.blend(lines[y][x].attr, alpha: s.alpha)
++              lines[y][x] = lines[y][x].attr = Colors.blend(lines[y][x].attr, alpha: s.alpha)
+               lines[y].dirty = true
+               x += 1
+             end
+@@ -641,7 +641,7 @@ module Crysterm
+               end
+               # D O:
+               # lines[y][x].attr = Colors.blend(@default_attr, lines[y][x].attr)
+-              lines[y][x2].attr = Colors.blend(lines[y][x2].attr, alpha: s.alpha)
++              lines[y][x2] = (lines[y][x2].attr = Colors.blend(lines[y][x2].attr, alpha: s.alpha))
+               lines[y].dirty = true
+             end
+             y += 1
+@@ -664,7 +664,7 @@ module Crysterm
+               end
+               # D O:
+               # lines[y][x].attr = Colors.blend(@default_attr, lines[y][x].attr)
+-              lines[y][x].attr = Colors.blend(lines[y][x].attr, alpha: s.alpha)
++              lines[y][x] = lines[y][x].attr = Colors.blend(lines[y][x].attr, alpha: s.alpha)
+               lines[y].dirty = true
+               x += 1
+             end
+@@ -687,7 +687,7 @@ module Crysterm
+               end
+               # D O:
+               # lines[y][x].attr = Colors.blend(@default_attr, lines[y][x].attr)
+-              lines[y][x2].attr = Colors.blend(lines[y][x2].attr, alpha: s.alpha)
++              lines[y][x2] = lines[y][x2].attr = Colors.blend(lines[y][x2].attr, alpha: s.alpha)
+               lines[y].dirty = true
+             end
+             y += 1
